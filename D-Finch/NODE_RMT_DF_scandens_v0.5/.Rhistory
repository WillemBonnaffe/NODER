tmp = apply(ensemble_, 1, function(x) apply(ddx.ddt.f_p.eval(Ybar_o,x) * t(ddt.Ybar_o), 2, function(x) x^2/sum(x^2)))
# boxplot(t(tmp),col=rainbow(N))
relativeC_q0.05 = matrix(apply(tmp,1,quantile,probs=0.05),nrow=n_,byrow=T)
relativeC_q0.50 = matrix(apply(tmp,1,quantile,probs=0.50),nrow=n_,byrow=T)
relativeC_q0.95 = matrix(apply(tmp,1,quantile,probs=0.95),nrow=n_,byrow=T)
relativeC_mean = matrix(apply(tmp,1,mean),nrow=n_,byrow=T)
relativeC_mean
## get ensemble for a specific time series
D = (2+N)*W_p
ensemble_ = ensemble[,D*(i-1)+1:D]
## compute ddt.Ybar_p
tmp = apply(ensemble_,1, function(x) ddt.f_p.eval(Ybar_o,x))
ddt.Ybar_p_q0.05 = apply(tmp,1,quantile,probs=0.05)
ddt.Ybar_p_q0.50 = apply(tmp,1,quantile,probs=0.50)
ddt.Ybar_p_q0.95 = apply(tmp,1,quantile,probs=0.95)
ddt.Ybar_p_mean = apply(tmp,1,mean)
## compute effects
tmp = apply(ensemble_,1, function(x) ddx.ddt.f_p.eval(Ybar_o,x))
ddx.ddt.Ybar_p_q0.05 = matrix(apply(tmp,1,quantile,probs=0.05),nrow=n_,byrow=T)
ddx.ddt.Ybar_p_q0.50 = matrix(apply(tmp,1,quantile,probs=0.50),nrow=n_,byrow=T)
ddx.ddt.Ybar_p_q0.95 = matrix(apply(tmp,1,quantile,probs=0.95),nrow=n_,byrow=T)
ddx.ddt.Ybar_p_mean = matrix(apply(tmp,1,mean),nrow=n_,byrow=T)
# ## remove non-significant effects (introduced in v0.23)
# tmp = ((ddx.ddt.Ybar_p_q0.05 * ddx.ddt.Ybar_p_q0.95) > 0) # both above or below 0
# ddx.ddt.Ybar_p_q0.05 = ddx.ddt.Ybar_p_q0.05 * tmp
# ddx.ddt.Ybar_p_q0.50 = ddx.ddt.Ybar_p_q0.50 * tmp
# ddx.ddt.Ybar_p_q0.95 = ddx.ddt.Ybar_p_q0.95 * tmp
# ddx.ddt.Ybar_p_mean = ddx.ddt.Ybar_p_mean * tmp
## compute mean effects
tmp = apply(ensemble_, 1, function(x) apply(ddx.ddt.f_p.eval(Ybar_o,x), 1, mean))
boxplot(t(tmp),col=rainbow(N))
Emean_q0.50 = apply(ddx.ddt.Ybar_p_q0.50,2,mean)
Emean_mean = apply(ddx.ddt.Ybar_p_mean,2,mean)
## compute contributions
tmp = apply(ensemble_, 1, function(x) ddx.ddt.f_p.eval(Ybar_o,x) * t(ddt.Ybar_o))
C_q0.05 = matrix(apply(tmp,1,quantile,probs=0.05),nrow=n_,byrow=T)
C_q0.50 = matrix(apply(tmp,1,quantile,probs=0.50),nrow=n_,byrow=T)
C_q0.95 = matrix(apply(tmp,1,quantile,probs=0.95),nrow=n_,byrow=T)
C_mean = matrix(apply(tmp,1,mean),nrow=n_,byrow=T)
## compute relative contributions
tmp = apply(ensemble_, 1, function(x) apply(ddx.ddt.f_p.eval(Ybar_o,x) * t(ddt.Ybar_o), 2, function(x) x^2/sum(x^2)))
# boxplot(t(tmp),col=rainbow(N))
relativeC_q0.05 = matrix(apply(tmp,1,quantile,probs=0.05),nrow=n_,byrow=T)
relativeC_q0.50 = matrix(apply(tmp,1,quantile,probs=0.50),nrow=n_,byrow=T)
relativeC_q0.95 = matrix(apply(tmp,1,quantile,probs=0.95),nrow=n_,byrow=T)
relativeC_mean = matrix(apply(tmp,1,mean),nrow=n_,byrow=T)
## compute total relative contributions (v0.25)
tmp = apply(ensemble_, 1, function(x) apply(ddx.ddt.f_p.eval(Ybar_o,x) * t(ddt.Ybar_o), 1, function(x) sum(x^2)))
tmp = apply(tmp, 2, function(x) x/sum(x)) # normalise
# plot(density(tmp[1,])$x,density(tmp[1,])$y/max(density(tmp[1,])$y),col=NA,xlim=c(0,1),ylim=c(0,1))
# for(f in 1:6)
#   {
#     lines(density(tmp[f,])$x,density(tmp[f,])$y/max(density(tmp[f,])$y),col=f+1)
# }
boxplot(t(tmp),col=rainbow(N))
#
## null distribution
tmp = apply(ensemble_, 1, function(x) apply(matrix(rnorm(n_*N),ncol=n_), 1, function(x) sum(x^2)))
tmp = apply(tmp, 2, function(x) x/sum(x)) # normalise
boxplot(t(tmp),col=rainbow(N,alpha=0.2),add=T)
# C_mean_sumsq = apply(C_mean^2,2,sum)
# C_mean_sumabs = apply(abs(C_mean),2,sum) # introduced in version 0.23
## r squared
res = ddt.Ybar_o[,i] - ddt.Ybar_p_mean
r2  = 1 - (sd(res)^2)/(sd(ddt.Ybar_o[,i])^2)
## store output values
EMat = rbind(EMat,Emean_mean)
# CMat = rbind(CMat,apply(Ctot_mean,2,sum)) # v0.21
# CMat = rbind(CMat,C_mean_sumsq) # v0.22
CMat = rbind(CMat,C_mean_sumabs) # v0.23
r2Vect = c(r2Vect,r2)
par(mfrow=c(5,1),mar=c(4,5,1,1),cex.lab=1)
#
## plot time series
plot(t_,Ybar_o[,i],type="l",col=rainbow(N)[i],xlab="Time",ylab="Density")
points(t,Y[,i])
#
## plot dynamics
plot(t_,ddt.Ybar_o[,i],type="l",xlab="Time",ylab="Dynamics")
polygon(c(t_,rev(t_)),c(ddt.Ybar_p_q0.05,rev(ddt.Ybar_p_q0.95)),border=NA,col=rainbow(N,alpha=0.2)[i])
lines(t_,ddt.Ybar_p_mean,type="l",col=rainbow(N)[i])
lines(t_,rep(0,n_),lty=2)
#
## plot effects
plot(t_,ddx.ddt.Ybar_p_mean[,1],ylim=c(-5,5),cex=0,xlab="Time",ylab="Effect")
for(j in 1:N)
{
polygon(c(t_,rev(t_)),c(ddx.ddt.Ybar_p_q0.05[,j],rev(ddx.ddt.Ybar_p_q0.95[,j])),border=NA,col=rainbow(N,alpha=0.2)[j])
lines(t_,ddx.ddt.Ybar_p_mean[,j],type="l",col=rainbow(N)[j])
}
lines(t_,rep(0,n_),lty=2)
#
## plot contributions
plot(t_,C_mean[,1],ylim=c(-6,6),cex=0,xlab="Time",ylab="Contribution")
for(j in 1:N)
{
polygon(c(t_,rev(t_)),c(C_q0.05[,j],rev(C_q0.95[,j])),border=NA,col=rainbow(N,alpha=0.2)[j])
lines(t_,C_mean[,j],type="l",col=rainbow(N)[j])
}
lines(t_,rep(0,n_),lty=2)
#
## plot contributions (%)
X_q0.05 = relativeC_q0.05
X_q0.50 = relativeC_q0.50
X_q0.95 = relativeC_q0.95
X_mean  = relativeC_mean
plot(t_,X_q0.50[,1],ylim=c(0,1),cex=0,xlab="Time",ylab="Contribution (%)")
for(j in 1:N)
{
polygon(c(t_,rev(t_)),c(X_q0.05[,j],rev(X_q0.95[,j])),border=NA,col=rainbow(N,alpha=0.2)[j])
lines(t_,X_mean[,j],type="l",col=rainbow(N)[j])
}
lines(t_,rep(0,n_),lty=2)
#
par(mfrow=c(1,1),mar=c(5,4,3,3)+0.1)
}
#
## null distribution
tmp = apply(ensemble_, 1, function(x) apply(matrix(rnorm(n_*N),ncol=n_), 1, function(x) sum(x^2)))
tmp = apply(tmp, 2, function(x) x/sum(x)) # normalise
tmp
## compute total relative contributions (v0.25)
tmp = apply(ensemble_, 1, function(x) apply(ddx.ddt.f_p.eval(Ybar_o,x) * t(ddt.Ybar_o), 1, function(x) sum(x^2)))
tmp = apply(tmp, 2, function(x) x/sum(x)) # normalise
boxplot(t(tmp),col=rainbow(N))
#
totC_q0.05 = apply(tmp,1,quantile,probs=0.05)
totC_q0.50 = apply(tmp,1,quantile,probs=0.5)
totC_q0.95 = apply(tmp,1,quantile,probs=0.05)
totC_mean = apply(tmp,1,mean)
#
## null distribution
tmp = apply(ensemble_, 1, function(x) apply(matrix(rnorm(n_*N),ncol=n_), 1, function(x) sum(x^2)))
tmp = apply(tmp, 2, function(x) x/sum(x)) # normalise
boxplot(t(tmp),col=rainbow(N,alpha=0.2),add=T)
## analyse process model
for(i in 1:N)
{
## get ensemble for a specific time series
D = (2+N)*W_p
ensemble_ = ensemble[,D*(i-1)+1:D]
## compute ddt.Ybar_p
tmp = apply(ensemble_,1, function(x) ddt.f_p.eval(Ybar_o,x))
ddt.Ybar_p_q0.05 = apply(tmp,1,quantile,probs=0.05)
ddt.Ybar_p_q0.50 = apply(tmp,1,quantile,probs=0.50)
ddt.Ybar_p_q0.95 = apply(tmp,1,quantile,probs=0.95)
ddt.Ybar_p_mean = apply(tmp,1,mean)
## compute effects
tmp = apply(ensemble_,1, function(x) ddx.ddt.f_p.eval(Ybar_o,x))
ddx.ddt.Ybar_p_q0.05 = matrix(apply(tmp,1,quantile,probs=0.05),nrow=n_,byrow=T)
ddx.ddt.Ybar_p_q0.50 = matrix(apply(tmp,1,quantile,probs=0.50),nrow=n_,byrow=T)
ddx.ddt.Ybar_p_q0.95 = matrix(apply(tmp,1,quantile,probs=0.95),nrow=n_,byrow=T)
ddx.ddt.Ybar_p_mean = matrix(apply(tmp,1,mean),nrow=n_,byrow=T)
# ## remove non-significant effects (introduced in v0.23)
# tmp = ((ddx.ddt.Ybar_p_q0.05 * ddx.ddt.Ybar_p_q0.95) > 0) # both above or below 0
# ddx.ddt.Ybar_p_q0.05 = ddx.ddt.Ybar_p_q0.05 * tmp
# ddx.ddt.Ybar_p_q0.50 = ddx.ddt.Ybar_p_q0.50 * tmp
# ddx.ddt.Ybar_p_q0.95 = ddx.ddt.Ybar_p_q0.95 * tmp
# ddx.ddt.Ybar_p_mean = ddx.ddt.Ybar_p_mean * tmp
## compute mean effects
tmp = apply(ensemble_, 1, function(x) apply(ddx.ddt.f_p.eval(Ybar_o,x), 1, mean))
boxplot(t(tmp),col=rainbow(N))
Emean_q0.50 = apply(ddx.ddt.Ybar_p_q0.50,2,mean)
Emean_mean = apply(ddx.ddt.Ybar_p_mean,2,mean)
## compute contributions
tmp = apply(ensemble_, 1, function(x) ddx.ddt.f_p.eval(Ybar_o,x) * t(ddt.Ybar_o))
C_q0.05 = matrix(apply(tmp,1,quantile,probs=0.05),nrow=n_,byrow=T)
C_q0.50 = matrix(apply(tmp,1,quantile,probs=0.50),nrow=n_,byrow=T)
C_q0.95 = matrix(apply(tmp,1,quantile,probs=0.95),nrow=n_,byrow=T)
C_mean = matrix(apply(tmp,1,mean),nrow=n_,byrow=T)
## compute relative contributions
tmp = apply(ensemble_, 1, function(x) apply(ddx.ddt.f_p.eval(Ybar_o,x) * t(ddt.Ybar_o), 2, function(x) x^2/sum(x^2)))
# boxplot(t(tmp),col=rainbow(N))
relativeC_q0.05 = matrix(apply(tmp,1,quantile,probs=0.05),nrow=n_,byrow=T)
relativeC_q0.50 = matrix(apply(tmp,1,quantile,probs=0.50),nrow=n_,byrow=T)
relativeC_q0.95 = matrix(apply(tmp,1,quantile,probs=0.95),nrow=n_,byrow=T)
relativeC_mean = matrix(apply(tmp,1,mean),nrow=n_,byrow=T)
## compute total relative contributions (v0.25)
tmp = apply(ensemble_, 1, function(x) apply(ddx.ddt.f_p.eval(Ybar_o,x) * t(ddt.Ybar_o), 1, function(x) sum(x^2)))
tmp = apply(tmp, 2, function(x) x/sum(x)) # normalise
boxplot(t(tmp),col=rainbow(N))
#
totC_q0.05 = apply(tmp,1,quantile,probs=0.05)
totC_q0.50 = apply(tmp,1,quantile,probs=0.5)
totC_q0.95 = apply(tmp,1,quantile,probs=0.05)
totC_mean = apply(tmp,1,mean)*(totC_q0.05>0.1)
#
## null distribution
tmp = apply(ensemble_, 1, function(x) apply(matrix(rnorm(n_*N),ncol=n_), 1, function(x) sum(x^2)))
tmp = apply(tmp, 2, function(x) x/sum(x)) # normalise
boxplot(t(tmp),col=rainbow(N,alpha=0.2),add=T)
## r squared
res = ddt.Ybar_o[,i] - ddt.Ybar_p_mean
r2  = 1 - (sd(res)^2)/(sd(ddt.Ybar_o[,i])^2)
## store output values
EMat = rbind(EMat,Emean_mean)
# CMat = rbind(CMat,apply(Ctot_mean,2,sum)) # v0.21
# CMat = rbind(CMat,C_mean_sumsq) # v0.22
CMat = rbind(CMat,totC_mean) # v0.25
r2Vect = c(r2Vect,r2)
par(mfrow=c(5,1),mar=c(4,5,1,1),cex.lab=1)
#
## plot time series
plot(t_,Ybar_o[,i],type="l",col=rainbow(N)[i],xlab="Time",ylab="Density")
points(t,Y[,i])
#
## plot dynamics
plot(t_,ddt.Ybar_o[,i],type="l",xlab="Time",ylab="Dynamics")
polygon(c(t_,rev(t_)),c(ddt.Ybar_p_q0.05,rev(ddt.Ybar_p_q0.95)),border=NA,col=rainbow(N,alpha=0.2)[i])
lines(t_,ddt.Ybar_p_mean,type="l",col=rainbow(N)[i])
lines(t_,rep(0,n_),lty=2)
#
## plot effects
plot(t_,ddx.ddt.Ybar_p_mean[,1],ylim=c(-5,5),cex=0,xlab="Time",ylab="Effect")
for(j in 1:N)
{
polygon(c(t_,rev(t_)),c(ddx.ddt.Ybar_p_q0.05[,j],rev(ddx.ddt.Ybar_p_q0.95[,j])),border=NA,col=rainbow(N,alpha=0.2)[j])
lines(t_,ddx.ddt.Ybar_p_mean[,j],type="l",col=rainbow(N)[j])
}
lines(t_,rep(0,n_),lty=2)
#
## plot contributions
plot(t_,C_mean[,1],ylim=c(-6,6),cex=0,xlab="Time",ylab="Contribution")
for(j in 1:N)
{
polygon(c(t_,rev(t_)),c(C_q0.05[,j],rev(C_q0.95[,j])),border=NA,col=rainbow(N,alpha=0.2)[j])
lines(t_,C_mean[,j],type="l",col=rainbow(N)[j])
}
lines(t_,rep(0,n_),lty=2)
#
## plot contributions (%)
X_q0.05 = relativeC_q0.05
X_q0.50 = relativeC_q0.50
X_q0.95 = relativeC_q0.95
X_mean  = relativeC_mean
plot(t_,X_q0.50[,1],ylim=c(0,1),cex=0,xlab="Time",ylab="Contribution (%)")
for(j in 1:N)
{
polygon(c(t_,rev(t_)),c(X_q0.05[,j],rev(X_q0.95[,j])),border=NA,col=rainbow(N,alpha=0.2)[j])
lines(t_,X_mean[,j],type="l",col=rainbow(N)[j])
}
lines(t_,rep(0,n_),lty=2)
#
par(mfrow=c(1,1),mar=c(5,4,3,3)+0.1)
}
## remove non-significant contributions
# X2_lo = qchisq(df=n_,p=0.05)
# X2_hi = qchisq(df=n_,p=0.95)
# CMat = CMat * (CMat > X2_hi)
# CMat = t(apply(CMat,1,function(x)x/sum(x)))
CMat = CMat/max(CMat)
# .plot.DIN(EMat,CMat*(CMat>0.1),colnames(Y))
.plot.DIN(EMat,CMat,colnames(Y))
# ## compute equilibrium densities
# argmin.ddt.f_p = function(Y_0,Omega)
# {
#   ## minimise ddt.f_p
#   Omega = matrix(Omega,ncol=N,byrow=F)
#   fn = function(x) ddt.f_p(x, Omega[,1])^2 + ddt.f_p(x, Omega[,2])^2 + ddt.f_p(x, Omega[,3])^2
#   res = optim(par=Y_0, fn=fn)
#   return(c(res$value,res$par))
# }
# #
# tmp = apply(ensemble,1, function(x) argmin.ddt.f_p(rep(0,N),x))
# tmp = tmp[,which(tmp[1,]<=0.001)][-1,]
# for(i in 1:N)
# {
#    	torm = which(abs(tmp[i,])>=3)
# 	if( length(torm) != 0 )
# 	{
# 		tmp = tmp[,-torm]
# 	}
# }
# argmin.ddt.f_p_q0.05 = matrix(apply(tmp,1,quantile,probs=0.05),nrow=N,byrow=T)
# argmin.ddt.f_p_q0.50 = matrix(apply(tmp,1,quantile,probs=0.50),nrow=N,byrow=T)
# argmin.ddt.f_p_q0.95 = matrix(apply(tmp,1,quantile,probs=0.95),nrow=N,byrow=T)
# #
# tmp = t(tmp); colnames(tmp) = colnames(Y)
# boxplot(tmp,ylab="Density")
CMat
## fit process model
EMat = NULL
CMat = NULL
r2Vect   = NULL
ensemble = NULL
for(i in 1:N)
{
## BFGS
ensemble_ = NULL
for(e in 1:N_e)
{
Omega_p   = rnorm((2+N)*W_p,0,sd2_p)
Omega_p   = argmax.logPost_p(Ybar_o,ddt.Ybar_o[,i],Omega_p)
ensemble_ = rbind(ensemble_,Omega_p)
}
ensemble = cbind(ensemble,ensemble_)
}
## analyse process model
for(i in 1:N)
{
## get ensemble for a specific time series
D = (2+N)*W_p
ensemble_ = ensemble[,D*(i-1)+1:D]
## compute ddt.Ybar_p
tmp = apply(ensemble_,1, function(x) ddt.f_p.eval(Ybar_o,x))
ddt.Ybar_p_q0.05 = apply(tmp,1,quantile,probs=0.05)
ddt.Ybar_p_q0.50 = apply(tmp,1,quantile,probs=0.50)
ddt.Ybar_p_q0.95 = apply(tmp,1,quantile,probs=0.95)
ddt.Ybar_p_mean = apply(tmp,1,mean)
## compute effects
tmp = apply(ensemble_,1, function(x) ddx.ddt.f_p.eval(Ybar_o,x))
ddx.ddt.Ybar_p_q0.05 = matrix(apply(tmp,1,quantile,probs=0.05),nrow=n_,byrow=T)
ddx.ddt.Ybar_p_q0.50 = matrix(apply(tmp,1,quantile,probs=0.50),nrow=n_,byrow=T)
ddx.ddt.Ybar_p_q0.95 = matrix(apply(tmp,1,quantile,probs=0.95),nrow=n_,byrow=T)
ddx.ddt.Ybar_p_mean = matrix(apply(tmp,1,mean),nrow=n_,byrow=T)
# ## remove non-significant effects (introduced in v0.23)
# tmp = ((ddx.ddt.Ybar_p_q0.05 * ddx.ddt.Ybar_p_q0.95) > 0) # both above or below 0
# ddx.ddt.Ybar_p_q0.05 = ddx.ddt.Ybar_p_q0.05 * tmp
# ddx.ddt.Ybar_p_q0.50 = ddx.ddt.Ybar_p_q0.50 * tmp
# ddx.ddt.Ybar_p_q0.95 = ddx.ddt.Ybar_p_q0.95 * tmp
# ddx.ddt.Ybar_p_mean = ddx.ddt.Ybar_p_mean * tmp
## compute mean effects
tmp = apply(ensemble_, 1, function(x) apply(ddx.ddt.f_p.eval(Ybar_o,x), 1, mean))
boxplot(t(tmp),col=rainbow(N))
Emean_q0.50 = apply(ddx.ddt.Ybar_p_q0.50,2,mean)
Emean_mean = apply(ddx.ddt.Ybar_p_mean,2,mean)
## compute contributions
tmp = apply(ensemble_, 1, function(x) ddx.ddt.f_p.eval(Ybar_o,x) * t(ddt.Ybar_o))
C_q0.05 = matrix(apply(tmp,1,quantile,probs=0.05),nrow=n_,byrow=T)
C_q0.50 = matrix(apply(tmp,1,quantile,probs=0.50),nrow=n_,byrow=T)
C_q0.95 = matrix(apply(tmp,1,quantile,probs=0.95),nrow=n_,byrow=T)
C_mean = matrix(apply(tmp,1,mean),nrow=n_,byrow=T)
## compute relative contributions
tmp = apply(ensemble_, 1, function(x) apply(ddx.ddt.f_p.eval(Ybar_o,x) * t(ddt.Ybar_o), 2, function(x) x^2/sum(x^2)))
# boxplot(t(tmp),col=rainbow(N))
relativeC_q0.05 = matrix(apply(tmp,1,quantile,probs=0.05),nrow=n_,byrow=T)
relativeC_q0.50 = matrix(apply(tmp,1,quantile,probs=0.50),nrow=n_,byrow=T)
relativeC_q0.95 = matrix(apply(tmp,1,quantile,probs=0.95),nrow=n_,byrow=T)
relativeC_mean = matrix(apply(tmp,1,mean),nrow=n_,byrow=T)
## compute total relative contributions (v0.25)
tmp = apply(ensemble_, 1, function(x) apply(ddx.ddt.f_p.eval(Ybar_o,x) * t(ddt.Ybar_o), 1, function(x) sum(x^2)))
tmp = apply(tmp, 2, function(x) x/sum(x)) # normalise
boxplot(t(tmp),col=rainbow(N))
#
totC_q0.05 = apply(tmp,1,quantile,probs=0.05)
totC_q0.50 = apply(tmp,1,quantile,probs=0.5)
totC_q0.95 = apply(tmp,1,quantile,probs=0.05)
totC_mean = apply(tmp,1,mean)*(totC_q0.05>0.1)
#
## null distribution
tmp = apply(ensemble_, 1, function(x) apply(matrix(rnorm(n_*N),ncol=n_), 1, function(x) sum(x^2)))
tmp = apply(tmp, 2, function(x) x/sum(x)) # normalise
boxplot(t(tmp),col=rainbow(N,alpha=0.2),add=T)
## r squared
res = ddt.Ybar_o[,i] - ddt.Ybar_p_mean
r2  = 1 - (sd(res)^2)/(sd(ddt.Ybar_o[,i])^2)
## store output values
EMat = rbind(EMat,Emean_mean)
# CMat = rbind(CMat,apply(Ctot_mean,2,sum)) # v0.21
# CMat = rbind(CMat,C_mean_sumsq) # v0.22
CMat = rbind(CMat,totC_mean) # v0.25
r2Vect = c(r2Vect,r2)
par(mfrow=c(5,1),mar=c(4,5,1,1),cex.lab=1)
#
## plot time series
plot(t_,Ybar_o[,i],type="l",col=rainbow(N)[i],xlab="Time",ylab="Density")
points(t,Y[,i])
#
## plot dynamics
plot(t_,ddt.Ybar_o[,i],type="l",xlab="Time",ylab="Dynamics")
polygon(c(t_,rev(t_)),c(ddt.Ybar_p_q0.05,rev(ddt.Ybar_p_q0.95)),border=NA,col=rainbow(N,alpha=0.2)[i])
lines(t_,ddt.Ybar_p_mean,type="l",col=rainbow(N)[i])
lines(t_,rep(0,n_),lty=2)
#
## plot effects
plot(t_,ddx.ddt.Ybar_p_mean[,1],ylim=c(-5,5),cex=0,xlab="Time",ylab="Effect")
for(j in 1:N)
{
polygon(c(t_,rev(t_)),c(ddx.ddt.Ybar_p_q0.05[,j],rev(ddx.ddt.Ybar_p_q0.95[,j])),border=NA,col=rainbow(N,alpha=0.2)[j])
lines(t_,ddx.ddt.Ybar_p_mean[,j],type="l",col=rainbow(N)[j])
}
lines(t_,rep(0,n_),lty=2)
#
## plot contributions
plot(t_,C_mean[,1],ylim=c(-6,6),cex=0,xlab="Time",ylab="Contribution")
for(j in 1:N)
{
polygon(c(t_,rev(t_)),c(C_q0.05[,j],rev(C_q0.95[,j])),border=NA,col=rainbow(N,alpha=0.2)[j])
lines(t_,C_mean[,j],type="l",col=rainbow(N)[j])
}
lines(t_,rep(0,n_),lty=2)
#
## plot contributions (%)
X_q0.05 = relativeC_q0.05
X_q0.50 = relativeC_q0.50
X_q0.95 = relativeC_q0.95
X_mean  = relativeC_mean
plot(t_,X_q0.50[,1],ylim=c(0,1),cex=0,xlab="Time",ylab="Contribution (%)")
for(j in 1:N)
{
polygon(c(t_,rev(t_)),c(X_q0.05[,j],rev(X_q0.95[,j])),border=NA,col=rainbow(N,alpha=0.2)[j])
lines(t_,X_mean[,j],type="l",col=rainbow(N)[j])
}
lines(t_,rep(0,n_),lty=2)
#
par(mfrow=c(1,1),mar=c(5,4,3,3)+0.1)
}
## remove non-significant contributions
# X2_lo = qchisq(df=n_,p=0.05)
# X2_hi = qchisq(df=n_,p=0.95)
# CMat = CMat * (CMat > X2_hi)
# CMat = t(apply(CMat,1,function(x)x/sum(x)))
CMat = CMat/max(CMat)
# .plot.DIN(EMat,CMat*(CMat>0.1),colnames(Y))
.plot.DIN(EMat,CMat,colnames(Y))
############
## main.r ##
############
## goal: load time series and apply the NODERMT analysis
## update
# 10-03-2021 - created version 0.0
# 11-03-2021 - created version 0.1
#            - implemented figures for the paper
# 29-03-2021 - created version 0.2
#            - combined figures for the paper
# 25-05-2021 - created version 0.3
#            - modularised code to work with any single time series file
##############
## INITIATE ##
##############
## goal: initiate the RMT algorithm
## load NODE functions
source("NODERMT_v0.25.r")
## visualise the time series
## load data
TS = read.table("TS.csv",sep=";",header=T)
## transform real variables
TS[,c("rain","small.seeds","large.seeds","fortis.N")] = log(TS[,c("rain","small.seeds","large.seeds","fortis.N")])
## subset and order data
TS = TS[,c("year","rain","small.seeds","large.seeds","fortis.N","fortis.PC1.beak","fortis.PC2.beak")]
# ## plot time series
# plot(TS[,1],TS[,2],xlab="Time (days)",ylab="Density (normalised)")
# for(j in 1:6)
# {
# 	points(TS[,1],TS[,j+1])
# 	lines(TS[,1],TS[,j+1],col=rainbow(6)[j])
# }
## apply NODERMT anlaysis
pdf("result_0.01.pdf")
#
outputList = fit.NODE(sd2_o=0.1,sd2_p=0.01,N_e=100)
save(outputList,file="TS_0.01.RData")
#
dev.off()
## apply NODERMT anlaysis
pdf("result_0.02.pdf")
#
outputList = fit.NODE(sd2_o=0.1,sd2_p=0.02,N_e=100)
save(outputList,file="TS_0.02.RData")
#
dev.off()
## apply NODERMT anlaysis
pdf("result_0.03.pdf")
#
outputList = fit.NODE(sd2_o=0.1,sd2_p=0.03,N_e=100)
save(outputList,file="TS_0.03.RData")
#
dev.off()
## apply NODERMT anlaysis
pdf("result_0.04.pdf")
#
outputList = fit.NODE(sd2_o=0.1,sd2_p=0.04,N_e=100)
save(outputList,file="TS_0.04.RData")
#
dev.off()
## apply NODERMT anlaysis
pdf("result_0.05.pdf")
#
outputList = fit.NODE(sd2_o=0.1,sd2_p=0.05,N_e=100)
save(outputList,file="TS_0.05.RData")
#
dev.off()
## apply NODERMT anlaysis
pdf("result_0.06.pdf")
#
outputList = fit.NODE(sd2_o=0.1,sd2_p=0.06,N_e=100)
save(outputList,file="TS_0.06.RData")
#
dev.off()
## apply NODERMT anlaysis
pdf("result_0.07.pdf")
#
outputList = fit.NODE(sd2_o=0.1,sd2_p=0.07,N_e=100)
save(outputList,file="TS_0.07.RData")
#
dev.off()
## plot interaction networks
pdf("DIN.pdf")
for(p in seq(0.01,0.07,0.01))
{
load(paste("TS_",p,".RData",sep=""))
EMat = outputList[[2]]
CMat = outputList[[3]]
# CMat = t(apply(CMat,1,function(x)x/sum(x)))
CMat[1,] = CMat[1,]*0.001
CMat = CMat/max(CMat)
CMat = CMat*(CMat>0.1)
.plot.DIN(EMat,CMat,colnames(TS)[-1])
}
dev.off()
#
###
