X_q0.50 = Ctot_q0.50
X_q0.95 = Ctot_q0.95
X_mean = Ctot_mean
plot(t_,X_q0.50[,1],ylim=c(0,1),cex=0,xlab="Time",ylab="Contribution (%)")
for(j in 1:N)
{
polygon(c(t_,rev(t_)),c(X_q0.05[,j],rev(X_q0.95[,j])),border=NA,col=rainbow(N,alpha=0.2)[j])
lines(t_,X_mean[,j],type="l",col=rainbow(N)[j])
}
lines(t_,rep(0,n_),lty=2)
#
par(mfrow=c(1,1),mar=c(5,4,3,3)+0.1)
}
## analyse process model
for(i in 1:N)
{
## get ensemble for a specific time series
D = (2+N)*W_p
ensemble_ = ensemble[,D*(i-1)+1:D]
## compute ddt.Ybar_p
tmp = apply(ensemble_,1, function(x) ddt.f_p.eval(Ybar_o,x))
ddt.Ybar_p_q0.05 = apply(tmp,1,quantile,probs=0.05)
ddt.Ybar_p_q0.50 = apply(tmp,1,quantile,probs=0.50)
ddt.Ybar_p_q0.95 = apply(tmp,1,quantile,probs=0.95)
ddt.Ybar_p_mean = apply(tmp,1,mean)
## compute effects
tmp = apply(ensemble_,1, function(x) ddx.ddt.f_p.eval(Ybar_o,x))
ddx.ddt.Ybar_p_q0.05 = matrix(apply(tmp,1,quantile,probs=0.05),nrow=n_,byrow=T)
ddx.ddt.Ybar_p_q0.50 = matrix(apply(tmp,1,quantile,probs=0.50),nrow=n_,byrow=T)
ddx.ddt.Ybar_p_q0.95 = matrix(apply(tmp,1,quantile,probs=0.95),nrow=n_,byrow=T)
ddx.ddt.Ybar_p_mean = matrix(apply(tmp,1,mean),nrow=n_,byrow=T)
## compute mean effects
Emean_q0.50 = apply(ddx.ddt.Ybar_p_q0.50,2,mean)
Emean_mean = apply(ddx.ddt.Ybar_p_mean,2,mean)
## compute contributions
C_q0.05 = ddx.ddt.Ybar_p_q0.05*ddt.Ybar_o
C_q0.50 = ddx.ddt.Ybar_p_q0.50*ddt.Ybar_o
C_q0.95 = ddx.ddt.Ybar_p_q0.95*ddt.Ybar_o
C_mean = ddx.ddt.Ybar_p_mean*ddt.Ybar_o
## compute total contributions
Ctot_q0.05 = t(apply(C_q0.05^2,1,function(x)x/sum(x)))
Ctot_q0.50 = t(apply(C_q0.50^2,1,function(x)x/sum(x)))
Ctot_q0.95 = t(apply(C_q0.95^2,1,function(x)x/sum(x)))
Ctot_mean = t(apply(C_mean^2,1,function(x)x/sum(x)))
## r squared
res = ddt.Ybar_o[,i] - ddt.Ybar_p_mean
r2  = 1 - (sd(res)^2)/(sd(ddt.Ybar_o[,i])^2)
EMat = rbind(EMat,Emean_mean)
CMat = rbind(CMat,apply(Ctot_mean,2,sum))
r2Vect = c(r2Vect,r2)
par(mfrow=c(5,1),mar=c(4,5,1,1),cex.lab=2)
#
## plot time series
plot(t_,Ybar_o[,i],type="l",col=rainbow(N)[i],xlab="Time",ylab="Density")
points(t,Y[,i])
#
## plot dynamics
plot(t_,ddt.Ybar_o[,i],type="l",xlab="Time",ylab="Dynamics")
polygon(c(t_,rev(t_)),c(ddt.Ybar_p_q0.05,rev(ddt.Ybar_p_q0.95)),border=NA,col=rainbow(N,alpha=0.2)[i])
lines(t_,ddt.Ybar_p_mean,type="l",col=rainbow(N)[i])
lines(t_,rep(0,n_),lty=2)
#
## plot effects
plot(t_,ddx.ddt.Ybar_p_mean[,1],ylim=c(-3,3),cex=0,xlab="Time",ylab="Effect")
for(j in 1:N)
{
polygon(c(t_,rev(t_)),c(ddx.ddt.Ybar_p_q0.05[,j],rev(ddx.ddt.Ybar_p_q0.95[,j])),border=NA,col=rainbow(N,alpha=0.2)[j])
lines(t_,ddx.ddt.Ybar_p_mean[,j],type="l",col=rainbow(N)[j])
}
lines(t_,rep(0,n_),lty=2)
#
## plot contributions
plot(t_,C_mean[,1],ylim=c(-3,3),cex=0,xlab="Time",ylab="Contribution")
for(j in 1:N)
{
polygon(c(t_,rev(t_)),c(C_q0.05[,j],rev(C_q0.95[,j])),border=NA,col=rainbow(N,alpha=0.2)[j])
lines(t_,C_mean[,j],type="l",col=rainbow(N)[j])
}
lines(t_,rep(0,n_),lty=2)
#
## plot contributions (%)
X_q0.05 = Ctot_q0.05
X_q0.50 = Ctot_q0.50
X_q0.95 = Ctot_q0.95
X_mean = Ctot_mean
plot(t_,X_q0.50[,1],ylim=c(0,1),cex=0,xlab="Time",ylab="Contribution (%)")
for(j in 1:N)
{
polygon(c(t_,rev(t_)),c(X_q0.05[,j],rev(X_q0.95[,j])),border=NA,col=rainbow(N,alpha=0.2)[j])
lines(t_,X_mean[,j],type="l",col=rainbow(N)[j])
}
lines(t_,rep(0,n_),lty=2)
#
par(mfrow=c(1,1),mar=c(5,4,3,3)+0.1)
}
############
## main.r ##
############
## goal: load time series and apply the NODERMT analysis
## update
# 10-03-2021 - created version 0.0
# 11-03-2021 - created version 0.1
#            - implemented figures for the paper
# 29-03-2021 - created version 0.2
#            - combined figures for the paper
##############
## INITIATE ##
##############
## goal: initiate the RMT algorithm
## visualise the time series
pdf("TS.pdf")
m = 1
par(mfrow=c(3,1))#,mar=c(4,4,2,2)+0.1)
for(m in 1:3)
{
## load data
TS = read.table(paste("TS_",m,".csv",sep=""),sep=";",header=T)
## order data
# TS = TS[,c("t","G","B","R")]
## transform real variables
# for(i in 2:ncol(TS)){TS[,i][which(TS[,i]<0.001)] = 0.005}
# TS[,c("R","G","B")] = log(TS[,c("R","G","B")])
## plot
plot(TS[,1],TS[,2],xlab="Time (days)",ylab="Density (normalised)")
for(j in 1:3)
{
points(TS[,1],TS[,j+1])
lines(TS[,1],TS[,j+1],col=rainbow(3)[j])
}
}
par(mfrow=c(1,1))#,mar=c(5,4,4,2)+0.1)
dev.off()
## run the NODERMT analysis for each time series
m = 1
for(m in 1:3)
{
## load data
TS = read.table(paste("TS_",m,".csv",sep=""),sep=";",header=T)
## order data
# TS = TS[,c("t","G","B","R")]
## transform real variables
for(i in 2:ncol(TS)){TS[,i][which(TS[,i]<0.001)] = 0.005}
TS[,c("R","G","B")] = log(TS[,c("R","G","B")])
## apply NODERMT anlaysis
pdf(paste("TS",m,".pdf",sep=""),height=18,width=6)
plot(TS)
source("NODERMT_v0.20.r")
save(outputList,file=paste("TS",m,".RData",sep=""))
dev.off()
}
#
###
############
## main.r ##
############
## goal: load time series and apply the NODERMT analysis
## update
# 10-03-2021 - created version 0.0
# 11-03-2021 - created version 0.1
#            - implemented figures for the paper
# 29-03-2021 - created version 0.2
#            - combined figures for the paper
##############
## INITIATE ##
##############
## goal: initiate the RMT algorithm
## visualise the time series
pdf("TS.pdf")
m = 1
par(mfrow=c(3,1))#,mar=c(4,4,2,2)+0.1)
for(m in 1:3)
{
## load data
TS = read.table(paste("TS_",m,".csv",sep=""),sep=";",header=T)
## order data
# TS = TS[,c("t","G","B","R")]
## transform real variables
# for(i in 2:ncol(TS)){TS[,i][which(TS[,i]<0.001)] = 0.005}
# TS[,c("R","G","B")] = log(TS[,c("R","G","B")])
## plot
plot(TS[,1],TS[,2],xlab="Time (days)",ylab="Density (normalised)")
for(j in 1:3)
{
points(TS[,1],TS[,j+1])
lines(TS[,1],TS[,j+1],col=rainbow(3)[j])
}
}
par(mfrow=c(1,1))#,mar=c(5,4,4,2)+0.1)
dev.off()
## run the NODERMT analysis for each time series
m = 1
for(m in 1:3)
{
## load data
TS = read.table(paste("TS_",m,".csv",sep=""),sep=";",header=T)
## order data
# TS = TS[,c("t","G","B","R")]
## transform real variables
for(i in 2:ncol(TS)){TS[,i][which(TS[,i]<0.001)] = 0.005}
TS[,c("R","G","B")] = log(TS[,c("R","G","B")])
## apply NODERMT anlaysis
pdf(paste("TS",m,".pdf",sep=""),height=18,width=6)
plot(TS)
source("NODERMT_v0.20.r")
save(outputList,file=paste("TS",m,".RData",sep=""))
dev.off()
}
#
###
############
## main.r ##
############
## goal: load time series and apply the NODERMT analysis
## update
# 10-03-2021 - created version 0.0
# 11-03-2021 - created version 0.1
#            - implemented figures for the paper
# 29-03-2021 - created version 0.2
#            - combined figures for the paper
##############
## INITIATE ##
##############
## goal: initiate the RMT algorithm
## visualise the time series
pdf("TS.pdf")
m = 1
par(mfrow=c(3,1))#,mar=c(4,4,2,2)+0.1)
for(m in 1:3)
{
## load data
TS = read.table(paste("TS_",m,".csv",sep=""),sep=";",header=T)
## order data
# TS = TS[,c("t","G","B","R")]
## transform real variables
# for(i in 2:ncol(TS)){TS[,i][which(TS[,i]<0.001)] = 0.005}
# TS[,c("R","G","B")] = log(TS[,c("R","G","B")])
## plot
plot(TS[,1],TS[,2],xlab="Time (days)",ylab="Density (normalised)")
for(j in 1:3)
{
points(TS[,1],TS[,j+1])
lines(TS[,1],TS[,j+1],col=rainbow(3)[j])
}
}
par(mfrow=c(1,1))#,mar=c(5,4,4,2)+0.1)
dev.off()
## run the NODERMT analysis for each time series
m = 1
for(m in 1:3)
{
## load data
TS = read.table(paste("TS_",m,".csv",sep=""),sep=";",header=T)
## order data
# TS = TS[,c("t","G","B","R")]
## transform real variables
for(i in 2:ncol(TS)){TS[,i][which(TS[,i]<0.001)] = 0.005}
TS[,c("R","G","B")] = log(TS[,c("R","G","B")])
## apply NODERMT anlaysis
# pdf(paste("TS",m,".pdf",sep=""),height=18,width=6)
plot(TS)
source("NODERMT_v0.20.r")
save(outputList,file=paste("TS",m,".RData",sep=""))
# dev.off()
}
############
## main.r ##
############
## goal: load time series and apply the NODERMT analysis
## update
# 10-03-2021 - created version 0.0
# 11-03-2021 - created version 0.1
#            - implemented figures for the paper
# 29-03-2021 - created version 0.2
#            - combined figures for the paper
##############
## INITIATE ##
##############
## goal: initiate the RMT algorithm
## visualise the time series
pdf("TS.pdf")
m = 1
par(mfrow=c(3,1))#,mar=c(4,4,2,2)+0.1)
for(m in 1:3)
{
## load data
TS = read.table(paste("TS_",m,".csv",sep=""),sep=";",header=T)
## order data
# TS = TS[,c("t","G","B","R")]
## transform real variables
# for(i in 2:ncol(TS)){TS[,i][which(TS[,i]<0.001)] = 0.005}
# TS[,c("R","G","B")] = log(TS[,c("R","G","B")])
## plot
plot(TS[,1],TS[,2],xlab="Time (days)",ylab="Density (normalised)")
for(j in 1:3)
{
points(TS[,1],TS[,j+1])
lines(TS[,1],TS[,j+1],col=rainbow(3)[j])
}
}
par(mfrow=c(1,1))#,mar=c(5,4,4,2)+0.1)
dev.off()
## run the NODERMT analysis for each time series
m = 1
for(m in 1:3)
{
## load data
TS = read.table(paste("TS_",m,".csv",sep=""),sep=";",header=T)
## order data
# TS = TS[,c("t","G","B","R")]
## transform real variables
for(i in 2:ncol(TS)){TS[,i][which(TS[,i]<0.001)] = 0.005}
TS[,c("R","G","B")] = log(TS[,c("R","G","B")])
## apply NODERMT anlaysis
# pdf(paste("TS",m,".pdf",sep=""),height=18,width=6)
plot(TS)
source("NODERMT_v0.20.r")
save(outputList,file=paste("TS",m,".RData",sep=""))
# dev.off()
}
#
###
############
## main.r ##
############
## goal: load time series and apply the NODERMT analysis
## update
# 10-03-2021 - created version 0.0
# 11-03-2021 - created version 0.1
#            - implemented figures for the paper
# 29-03-2021 - created version 0.2
#            - combined figures for the paper
##############
## INITIATE ##
##############
## goal: initiate the RMT algorithm
## visualise the time series
pdf("TS.pdf")
m = 1
par(mfrow=c(3,1))#,mar=c(4,4,2,2)+0.1)
for(m in 1:3)
{
## load data
TS = read.table(paste("TS_",m,".csv",sep=""),sep=";",header=T)
## order data
# TS = TS[,c("t","G","B","R")]
## transform real variables
# for(i in 2:ncol(TS)){TS[,i][which(TS[,i]<0.001)] = 0.005}
# TS[,c("R","G","B")] = log(TS[,c("R","G","B")])
## plot
plot(TS[,1],TS[,2],xlab="Time (days)",ylab="Density (normalised)")
for(j in 1:3)
{
points(TS[,1],TS[,j+1])
lines(TS[,1],TS[,j+1],col=rainbow(3)[j])
}
}
par(mfrow=c(1,1))#,mar=c(5,4,4,2)+0.1)
dev.off()
## run the NODERMT analysis for each time series
m = 1
for(m in 1:3)
{
## load data
TS = read.table(paste("TS_",m,".csv",sep=""),sep=";",header=T)
## order data
# TS = TS[,c("t","G","B","R")]
## transform real variables
for(i in 2:ncol(TS)){TS[,i][which(TS[,i]<0.001)] = 0.005}
TS[,c("R","G","B")] = log(TS[,c("R","G","B")])
## apply NODERMT anlaysis
# pdf(paste("TS",m,".pdf",sep=""),height=18,width=6)
plot(TS)
source("NODERMT_v0.20.r")
save(outputList,file=paste("TS",m,".RData",sep=""))
# dev.off()
}
#
###
## run the NODERMT analysis for each time series
m = 1
## load data
TS = read.table(paste("TS_",m,".csv",sep=""),sep=";",header=T)
## transform real variables
for(i in 2:ncol(TS)){TS[,i][which(TS[,i]<0.001)] = 0.005}
TS[,c("R","G","B")] = log(TS[,c("R","G","B")])
plot(TS)
############
## main.r ##
############
## goal: load time series and apply the NODERMT analysis
## update
# 10-03-2021 - created version 0.0
# 11-03-2021 - created version 0.1
#            - implemented figures for the paper
# 29-03-2021 - created version 0.2
#            - combined figures for the paper
##############
## INITIATE ##
##############
## goal: initiate the RMT algorithm
## visualise the time series
pdf("TS.pdf")
m = 1
par(mfrow=c(3,1))#,mar=c(4,4,2,2)+0.1)
for(m in 1:3)
{
## load data
TS = read.table(paste("TS_",m,".csv",sep=""),sep=";",header=T)
## order data
# TS = TS[,c("t","G","B","R")]
## transform real variables
# for(i in 2:ncol(TS)){TS[,i][which(TS[,i]<0.001)] = 0.005}
# TS[,c("R","G","B")] = log(TS[,c("R","G","B")])
## plot
plot(TS[,1],TS[,2],xlab="Time (days)",ylab="Density (normalised)")
for(j in 1:3)
{
points(TS[,1],TS[,j+1])
lines(TS[,1],TS[,j+1],col=rainbow(3)[j])
}
}
par(mfrow=c(1,1))#,mar=c(5,4,4,2)+0.1)
dev.off()
## run the NODERMT analysis for each time series
m = 1
for(m in 1:3)
{
## load data
TS = read.table(paste("TS_",m,".csv",sep=""),sep=";",header=T)
## order data
# TS = TS[,c("t","G","B","R")]
## transform real variables
for(i in 2:ncol(TS)){TS[,i][which(TS[,i]<0.001)] = 0.005}
TS[,c("R","G","B")] = log(TS[,c("R","G","B")])
## apply NODERMT anlaysis
# pdf(paste("TS",m,".pdf",sep=""),height=18,width=6)
# plot(TS)
source("NODERMT_v0.20.r")
save(outputList,file=paste("TS",m,".RData",sep=""))
# dev.off()
}
#
###
##
pdf(paste("TS_DIN_",m,".pdf",sep=""),height=3,width=3)
#
CMat = t(apply(CMat,1,function(x)x/sum(x)))
.plot.DIN(EMat,CMat*(CMat>0.1),colnames(Y))
#
dev.off()
##
pdf(paste("TS_DIN_",m,".pdf",sep=""),height=6,width=6)
#
CMat = t(apply(CMat,1,function(x)x/sum(x)))
.plot.DIN(EMat,CMat*(CMat>0.1),colnames(Y))
#
dev.off()
############
## main.r ##
############
## goal: load time series and apply the NODERMT analysis
## update
# 10-03-2021 - created version 0.0
# 11-03-2021 - created version 0.1
#            - implemented figures for the paper
# 29-03-2021 - created version 0.2
#            - combined figures for the paper
##############
## INITIATE ##
##############
## goal: initiate the RMT algorithm
## visualise the time series
pdf("TS.pdf")
m = 1
par(mfrow=c(3,1))#,mar=c(4,4,2,2)+0.1)
for(m in 1:3)
{
## load data
TS = read.table(paste("TS_",m,".csv",sep=""),sep=";",header=T)
## order data
# TS = TS[,c("t","G","B","R")]
## transform real variables
# for(i in 2:ncol(TS)){TS[,i][which(TS[,i]<0.001)] = 0.005}
# TS[,c("R","G","B")] = log(TS[,c("R","G","B")])
## plot
plot(TS[,1],TS[,2],xlab="Time (days)",ylab="Density (normalised)")
for(j in 1:3)
{
points(TS[,1],TS[,j+1])
lines(TS[,1],TS[,j+1],col=rainbow(3)[j])
}
}
par(mfrow=c(1,1))#,mar=c(5,4,4,2)+0.1)
dev.off()
## run the NODERMT analysis for each time series
m = 1
for(m in 1:3)
{
## load data
TS = read.table(paste("TS_",m,".csv",sep=""),sep=";",header=T)
## order data
# TS = TS[,c("t","G","B","R")]
## transform real variables
for(i in 2:ncol(TS)){TS[,i][which(TS[,i]<0.001)] = 0.005}
TS[,c("R","G","B")] = log(TS[,c("R","G","B")])
## apply NODERMT anlaysis
# pdf(paste("TS",m,".pdf",sep=""),height=18,width=6)
# plot(TS)
source("NODERMT_v0.20.r")
save(outputList,file=paste("TS",m,".RData",sep=""))
# dev.off()
}
